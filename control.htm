<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0048)https://en.wikipedia.org/wiki/International_unit -->
<HTML dir=ltr lang=en class=client-nojs><HEAD><META content="IE=8.0000" 
http-equiv="X-UA-Compatible">
<TITLE>Xunger@PKU</TITLE>
<META charset=UTF-8>


<LINK rel=stylesheet 
href="load.css">

<META name=ResourceLoaderDynamicStyles content=""><LINK rel=stylesheet 
href="load(1).css">

<LINK rel=stylesheet 
href="global.css">

<META name=GENERATOR content="MSHTML 8.00.6001.23588">
</HEAD>







<BODY 
class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-International_unit skin-vector action-view">

<div id="header">
<!--img src="pku-logo.png" class="picture1"-->


<DIV id=mw-page-base class=noprint></DIV>
<DIV id=mw-head-base class=noprint></DIV>
<DIV id=content class=mw-body role=main><A id=top></A>
<DIV id=siteNotice><!-- CentralNotice --></DIV>











<DIV class=mw-indicators></DIV>



<DIV id=bodyContent class=mw-body-content>
<DIV id=siteSub>
	<ul style="line-height: 110%">

<script src="http://pv.sohu.com/cityjson?ie=utf-8
"></script>
<!--script>
%alert(returnCitySN.cname);
</script-->




<p id="demo"></p>

        <script type="text/javascript">
 var time = new Date().getHours();
    if (returnCitySN.cid != 810000) {
        document.getElementById("demo").innerHTML = "";}
    if (returnCitySN.cid == 810000) {
        document.getElementById("demo").innerHTML = "";}
  
         	
        </script>


		
</ul>




	</DIV>
	
<DIV id=contentSub></DIV>




<div id="main">

	

<h2><a name="aa"></a> 自动控制原理 Automatic Control Fundamentals</h2>

<h4><a name="1"></a> Objective	</h4>	

Introduce the fundamentals of classical and modern control theories for undergraduates in College of Engineering. The graduate students in dynamics and control are welcome if their undergraduate trainning is not in control. The scope of this course covers 
stability and dynamic analysis, and synthesize control methods in  frequency domain and time domain.  


<h4><a name="3"></a> Textbook 	</h4>	

<ol>
<li> Oppenheim A.V., Signal and System. (Prerequisite)</li>
<li> Dorf R. C., Bishop R. H. Modern Control Systems, 11th edition.   </li>
<li> 胡寿松, 自动控制原理，西工大、北航、南航三校合编控制专业教材。   </li>
<li> 吴麒，自动控制原理，清华大学自动化系教材。  </li>
</ol>

<h4><a name="31"></a> Grading policy	</h4>	

<ol>
<li> Experiment and Report, 30%. </li>
<li> Midterm, 30%.       </li>
<li> Final, 40%. </li>
</ol>



<h4><a name="5"></a> Syllabus	</h4>	

<ol>
<li> Introduction. Reading: Chap 1. HWs: E1.2, E1.9, E1.10, P1.21, DP1.6  </li>
<li> Fourier & Laplace. Chap 2 (Read more references and develop insights of Fourier series, Fourier transform and Laplace transform).   </li>
<li>  Chap 2 (omit the motor part, in Table 2.5 for example; omit the whole signal-flow graph part, i.e. Sec 2.7)
HWs: (1) Go through Sec 2.9 by using MATLAB; (2) E2.5, E2.8, E2.21, E2.27, P2.43, CP2.6.  </li>
<li> State space and Laplace (I). Reading: Chaps 2-3  (omit all parts need signal-flow graph).
HWs: (1) Go through Example 3.2 (omit signal-flow graph);
(2) Go through Example 3.4;
(3) Go through Sec 3.9 with MATLAB;
(4) E3.19, P3.8.   </li>
<li> State space and Laplace (II). HW the same as above. </li>
<li> Transfer function and modes. Finish reading chap 1-3.  </li>
<li> Feedback system characteristics. Reading: Chap 4. Self-test: E4.1-4.10. HWs: P4.2, P4.7, P4.12. </li>
<li> Feedback system performance. Reading: Chap 5. Self-test: E5.1-5.2, E5.4, E5.5, E5.8-12, E5.17, E5.19. </li>
<li> Feedback more and examples. Reading: Finish reading Chap 4-5 together. HWs: P5.5-P5.7, AP5.1, AP5.4.   </li>
<li> Stability. Reading: Chap 6. Self-test: E6.1-6.4, E6.7, E6.9-6-13, E6.22. HWs: P6.2, P6.10, P6.12, P6.17-6.18. </li>
<li>  Root locus. Rading: Chap 7. HW: Announced during the class.</li>
<li>  Frequency response. Reading: Chap 8. HW: E8.1, 8.5, 8.12-13, P8.6.</li>
<li>  Control applications I. </li>
<li>  Control applications II. </li>
<li>  Mock exam. </li>

</ol>


     <div id="content" class="mw-body" role="main">
            <div id="main">
                <h2>控制原理实验课-倒立摆</h2>

                <h3>前置准备</h3>
                <ol>
                    <li>下载并安装 Arduino IDE 1.8.16。</li>
                    <li>确保电脑已配置 Python 3（建议 3.8）。</li>
                    <li>下载 <b>倒立摆控制代码包</b>，解压放入同一文件夹下。安装 Python 所需依赖库：time，math，multiprocessing，matplotlib，pyqtgraph，serial，datetime。</li>
                </ol>

                <h3>课程安排</h3>
                <ol>
                    <li>
                        <b>第一节课：硬件连接与传感器调试</b>
                        <ul>
                            <li>讲解系统组件：Arduino、TB6612 驱动、电位计、编码器、倒立摆机构
                                <figure>
                                    <img src="images/ctr1.png" class="fans" width="500">
                                    <figcaption>图1：倒立摆系统结构</figcaption>
                                </figure>
                            </li>
                            <li>根据提供接线图完成连线
                                <figure>
                                    <img src="images/ctr2.png" class="fans" width="500">
                                    <figcaption>图2：倒立摆接线图示意</figcaption>
                                </figure>
                                <figure>
                                    <img src="images/ctr3.png" class="fans" width="500">
                                    <figcaption>图3：电机接线图示意</figcaption>
                                </figure>
                            </li>
                            <li>烧录测试代码 <code>A_0.cpp</code>，通过工具 → 串口监视器查看 A0 电位计值。</li>
                            <li>将 <code>inverted_pendulum_v2_class_v4.py</code> 以及 <code>full_state_controller_v2_class_v4.py</code> 中竖直电位计值设定值更改为观测值（一般在 750–800）。</li>
                        </ul>
                    </li>

                    <li>
                        <b>第二节课：PID 控制器设计</b>
                        <ul>
                            <li>回顾讲解 PID 控制原理。</li>
                            <li>补写 Python 控制器代码，实现对竖直角的闭环控制。</li>
                            <li>调试参数，连好硬件，打开 IDE，双击 Arduino 复位键，在工具中选择正确的板子和端口（例如显示端口为 COM4），烧录 Arduino 代码。随后打开 <code>full_state_controller_v2_class_v4.py</code>，更改通信部分端口为 COM4。给电机通电，将倒立摆扶到竖直位置，同时运行 <code>full_state_controller_v2_class_v4.py</code>，倒立摆开始运转。运行一轮后，单击 Arduino 上的复位键，可运行下一次，实现 30 秒稳定控制。</li>
                            <li>记录控制响应并分析控制器动态特性。</li>
                        </ul>
                    </li>

                    <li>
                        <b>第三节课：全状态反馈控制器设计</b>
                        <ul>
                            <li>讲解全状态反馈控制理论，参考 <a href="https://zhuanlan.zhihu.com/p/400714590" target="_blank">知乎专栏文章</a>。</li>
                            <li>根据倒立摆参数，使用 MATLAB 计算 LQR 最优化增益。</li>
                            <li>完善 <code>fullstate_controller_v2_class_v4.py</code> 控制逻辑。</li>
                            <li>连好硬件，实现 30 秒稳定控制。启动方式同第二节课。</li>
                        </ul>
                    </li>
                </ol>

                <h3>通信及 py 代码简介</h3>
                <ol>
                    <li>
                        <b>UART 通信机制：</b>使用 USB 实现 PC 与 Arduino 间的 UART 通信，采用握手机制确保同步。
                        <ul>
                            <li>PC 端发送握手命令 <code>self.ser.write(b"GO\n")</code></li>
                            <li>Arduino 端接收 3 字节并检查 <code>buf == "GO\n"</code></li>
                        </ul>
                    </li>
                    <li>
                        <b>通信数据结构：</b>
                        <ul>
                            <li><b>PC → Arduino：</b>3 字节控制指令 [方向 dir，占空比 pwm，标志位 17]</li>
                            <li><b>Arduino → PC：</b>10 字节状态数据 [电位计值、电位计变化率、编码器值、编码器变化率、符号标志]</li>
                        </ul>
                    </li>
                    <li>
                        <b>Python 控制代码结构：</b>
                        <ul>
                            <li><code>arduino_v2.py</code>：封装串口通信逻辑，负责握手、读写数据。</li>
                            <li><code>inverted_pendulum_v2_class_v4.py</code>：处理 Arduino 返回的原始数据，并转换为物理状态。</li>
                            <li><code>fullstate_controller_v2_class_v4.py</code>：主控制器程序，基于 LQR 实现全状态反馈。</li>
                            <li><code>save_angle_values_v2.py</code> 与 <code>save_actions.py</code>：将运行过程中记录的角度值（theta/alpha）与控制指令（PWM）存储为文本。</li>
                        </ul>
                    </li>
                    <li>
                        <b>Arduino 固件 <code>uart_inverted_pendulum.ino</code>：</b>
                        <ul>
                            <li>读取编码器和电位计数据。</li>
                            <li>计算角速度，响应上位机控制指令。</li>
                            <li>通过 UART 定时发送 10 字节状态数据。</li>
                        </ul>
                    </li>
                </ol>

                <h3>实验考核</h3>
                <ul>
                    <li>需提交电子报告（PDF），包括：</li>
                    <ul>
                        <li>实验图片、Python 控制器代码截图、角度随时间变化曲线。</li>
                        <li>对 PID 与全状态反馈控制的比较分析。</li>
                    </ul>
                </ul>
            </div>
        </div>
	

	
<h4><a name="6"></a>* 说明：受GitHub托管300M空间限制，所有参考资料不再此提供，请尝试：http://www2.coe.pku.edu.cn/faculty/huangxun。</h4>	



</div>







<DIV class=visualClear></DIV></DIV></DIV>
<DIV id=mw-navigation>
<H2>Navigation menu</H2>
<DIV id=mw-head>

<DIV id=left-navigation>
<DIV id=p-namespaces class=vectorTabs role=navigation 
aria-labelledby=p-namespaces-label>

<DIV class=menu>
<UL></UL></DIV></DIV></DIV>

  
<DIV id=p-cactions class="vectorMenu emptyPortlet" role=navigation 
aria-labelledby=p-cactions-label>


<DIV class=menu>
<UL></UL></DIV></DIV>
</DIV></DIV>



<DIV id=mw-panel>
	<DIV id=p-lang class=portal role=navigation aria-labelledby=p-lang-label>
<DIV id=p-logo role=banner></DIV>
<DIV id=p-navigation class=portal role=navigation 
aria-labelledby=p-navigation-label>
<H3 id=p-navigation-label>Navigation</H3>
<DIV class=body>
<UL>
<li><a href="https://xunger99.github.io/xunger/">English</a></li>
<li><a href="https://xunger99.github.io/xunger/papers.htm">Publication</a></li>
<li><a href="https://xunger99.github.io/xunger/chinese.htm">简介</a></li>
<li><a href="https://xunger99.github.io/xunger/group.htm">人才培养</a></li>
<li><a href="https://xunger99.github.io/xunger/aaero.htm">教学资源-气动声学</a></li>
<li><a href="https://xunger99.github.io/xunger/acontrol.htm">教学资源-主动控制</a></li>
<li><a href="https://xunger99.github.io/xunger/control.htm">教学资源-控制原理</a></li>
<li><a href="https://xunger99.github.io/xunger/ee.htm">教学资源-电路电子</a></li>
<li><a href="https://xunger99.github.io/xunger/flight.htm">教学资源-飞行控制</a></li>
<li><a href="https://xunger99.github.io/xunger/caa.htm">教学资源-CAA</a></li>
<li><a href="https://xunger99.github.io/xunger/sat.htm">教学资源-卫星初步</a></li>
<li><a href="https://xunger99.github.io/xunger/undergrad.htm">教学资源-本科科研</a></li>
<li><a href="https://xunger99.github.io/xunger/outcome.htm">科研成果科普</a></li>
</UL></DIV></DIV>

<DIV id=p-lang class=portal role=navigation aria-labelledby=p-lang-label>


</DIV></DIV></DIV></DIV>
<DIV id=footer role=contentinfo>
<UL id=footer-info>
  <LI id=footer-info-lastmod> </LI>
 </UL></DIV>

</BODY></HTML>
